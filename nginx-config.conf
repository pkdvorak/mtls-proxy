# openresty nginx.conf (výřez)
lua_package_path '/usr/local/openresty/lualib/?.lua;;';
resolver 1.1.1.1 ipv6=off;

# cache pro OIDC metadata/JWKS je uvnitř knihovny; můžeš přidat lua_shared_dict
lua_shared_dict discovery 10m;
lua_shared_dict jwks      10m;

server {
    listen 443 ssl;
    server_name proxy.example.com;

    # ---- mTLS ----
    ssl_certificate      /etc/nginx/tls/server.crt;
    ssl_certificate_key  /etc/nginx/tls/server.key;
    ssl_client_certificate /etc/nginx/tls/trusted-clients.pem;
    ssl_verify_client on;

    # ---- JWT validace přes lua-resty-openidc ----
    # access fáze: ověř token z Authorization: Bearer ...
    access_by_lua_block {
        local opts = {
          discovery = "https://login.microsoftonline.com/<TENANT_ID>/v2.0/.well-known/openid-configuration",
          accept_unsupported_alg = false,
          token_signing_alg_values_expected = { "RS256" },
          -- nastav očekávané audience (Application ID URI / client_id)
          client_id = "api://your-app-id-or-uri",  -- nebo očekávané aud
          -- nepoužíváme interaktivní flow, jen verify(); nepotřebujeme client_secret
        }
        local oidc = require("resty.openidc")
        local err, jwt = oidc.bearer_jwt_verify(opts)
        if err then
          ngx.log(ngx.WARN, "drop_invalid_token reason=", err)
          return ngx.exit(401)
        end
        -- volitelná kontrola scope/roles:
        local scp = (jwt and jwt.payload and jwt.payload["scp"]) or ""
        if not string.find(" "..scp.." ", " read ", 1, true) then
          ngx.log(ngx.WARN, "insufficient_scopes: ", scp)
          return ngx.exit(403)
        end
        -- claims můžeš předat dál, např. do hlaviček:
        ngx.req.set_header("X-Auth-Subject", jwt.payload.sub or "")
        ngx.req.set_header("X-Auth-Aud", jwt.payload.aud or "")
      }

    location / {
        proxy_set_header X-Client-Cert $ssl_client_escaped_cert;
        proxy_set_header X-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-SSL-Issuer  $ssl_client_i_dn;

        proxy_pass https://backend.internal.example.com;
        proxy_set_header Host $proxy_host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
}
